# This build pipeline will only be triggered by changes on the 'master branch'.
trigger:
  - master
  
# This build pipeline will run on agents from the 'default' build agent pool
# and will specifically target build agents that have the custom 'Build.Server'
pool: 
  name: DSI e-DReaMS BUILDS

# This variable will make sure that automatic Azure DevOps code coverage generation is disabled.
# For this build we are using a custom code coverage tool that generates a more extensive output.
variables:
  - name: disable.coverage.autogenerate
    value: 'true'

# This build pipeline will run the following build steps...
steps:

  # This PowerShell script updates the build number.
  - task: PowerShell@2
    displayName: Set Dynamic Build Number
    env: 
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |        
        $variableGroup = "EDR Component Versions"
        $versionVariableName = "Edreams.Db.Outlook.Middleware.Version"
        
        $today = Get-Date 
        $midnight = Get-Date -Hour 0 -Minute 00 -Second 00
        $referenceDate = [datetime]"01/01/2000 00:00"
        $diffInDays = New-TimeSpan -Start $referenceDate -End $today
        $autoBuild = [math]::Floor($diffInDays.TotalDays)
        $diffInSeconds = New-TimeSpan -Start $midnight -End $today
        $autoRevision = [math]::Floor($diffInSeconds.TotalSeconds / 2)

        #Use variable from task group
        $oauthToken = $env:SYSTEM_ACCESSTOKEN
        $url = "https://dev.azure.com/BE-eDReaMS/DSI/_apis/distributedtask/variablegroups"
        Write-Host "Getting versioning info from: $url"
        $headers = @{
          Authorization="Bearer $oauthToken"
        }
        $call = Invoke-RestMethod -Headers $headers -Uri $url -Method Get
        $value = $call.value
        foreach($group in $call.value){
            if($group.name -eq $VariableGroup){
                $var = $group.variables.$versionVariableName
                if(-not ($var -eq $null)){
                    $majorMinor = $var.value
                }
            }
        }

        $buildNumber = $majorMinor + "." + $autoBuild + "." + $autoRevision

        Write-Host "Current Build Number " + $env:BUILD_BUILDNUMBER
        Write-Host "Generated Build Number " + $buildNumber
        Write-Host "##vso[build.updatebuildnumber]$buildNumber"
        Write-Host "Done"


  # Install the latest NuGet tool for compatibility (the default one throws
  # a parse exception on our solution files).
  - task: NuGetToolInstaller@1
    displayName: Install NuGet 5.x on Build Agent
    inputs:
      versionSpec: '5.x'
      
  # Run a NuGet restore on all the solution files.
  - task: NuGetCommand@2
    displayName: Restore NuGet Packages
    inputs:
      command: 'restore'
      restoreSolution: '**/Edreams.OutlookMiddleware.sln'
      feedsToUse: config
      nugetConfigPath: '$(Build.SourcesDirectory)/.nuget/nuget.config'

  # Run a Visual Studio build on all solution files.
  - task: VSBuild@1
    displayName: Build Solution using Visual Studio
    inputs:
      restoreSolution: '**/Edreams.OutlookMiddleware.sln'
      configuration: Release

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.StagingDirectory)'
    inputs:
       SourceFolder: '$(Build.SourcesDirectory)'
       Contents: |
        **
        !**/*.pdb
        !**/*.xml
       TargetFolder: '$(Build.StagingDirectory)'

  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Db.zip archive
    inputs:
      rootFolderOrFile: '$(Build.StagingDirectory)/Edreams.OutlookMiddleware.Db/bin/release'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/zip/Edreams.OutlookMiddleware.Db.zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Upload Artifacts
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/zip' 
      artifactName: 'release'
name: 2.0.{Auto.Build}.{Auto.Revision}

# This build pipeline will only be triggered by changes on the 'dev and feature branches'.
trigger:
  - master
  
# This build pipeline will run on agents from the 'default' build agent pool
# and will specifically target build agents that have the custom 'Build.Server'
pool: 
  name: DSI e-DReaMS BUILDS 

# This variable will make sure that automatic Azure DevOps code coverage generation is disabled.
# For this build we are using a custom code coverage tool that generates a more extensive output.
variables:
  - name: disable.coverage.autogenerate
    value: 'true'

# This build pipeline will run the following build steps...
steps:

  # This PowerShell script updates the build number.
  - task: PowerShell@2
    displayName: Set Dynamic Build Number
    env: 
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |        
        $variableGroup = "EDR Component Versions"
        $versionVariableName = "Edreams.Outlook.Middleware.Version"
        
        $today = Get-Date 
        $midnight = Get-Date -Hour 0 -Minute 00 -Second 00
        $referenceDate = [datetime]"01/01/2000 00:00"
        $diffInDays = New-TimeSpan -Start $referenceDate -End $today
        $autoBuild = [math]::Floor($diffInDays.TotalDays)
        $diffInSeconds = New-TimeSpan -Start $midnight -End $today
        $autoRevision = [math]::Floor($diffInSeconds.TotalSeconds / 2)

        #Use variable from task group
        $oauthToken = $env:SYSTEM_ACCESSTOKEN
        $url = "https://dev.azure.com/BE-eDReaMS/DSI/_apis/distributedtask/variablegroups"
        Write-Host "Getting versioning info from: $url"
        $headers = @{
          Authorization="Bearer $oauthToken"
        }
        $call = Invoke-RestMethod -Headers $headers -Uri $url -Method Get
        $value = $call.value
        foreach($group in $call.value){
            if($group.name -eq $VariableGroup){
                $var = $group.variables.$versionVariableName
                if(-not ($var -eq $null)){
                    $majorMinor = $var.value
                }
            }
        }

        $buildNumber = $majorMinor + "." + $autoBuild + "." + $autoRevision

        Write-Host "Current Build Number " + $env:BUILD_BUILDNUMBER
        Write-Host "Generated Build Number " + $buildNumber
        Write-Host "##vso[build.updatebuildnumber]$buildNumber"
        Write-Host "Done"
      
  - task: PowerShell@2
    displayName: Set NUSPEC TimeStamp
    inputs:
      targetType: 'inline'
      script: |
        $timestamp = Get-Date -Format $format
        $files = gci $Env:BUILD_SOURCESDIRECTORY -recurse -filter '*.nuspec'
        if($files)
        {
            $message = [string]::Format('Will apply {0} to {1} files.', $timestamp, $files.Count)
            Write-Host $message

            foreach ($file in $files) 
            {
                $filecontent = Get-Content($file.FullName)
                attrib $file -r
                $filecontent.Replace('#{timestamp}#', $timestamp) | Set-Content $file.FullName
                Write-Host "$file - timestamp applied"
            }
        }
        else
        {
            Write-Host "Found no files."
        }
        
  # Install the latest NuGet tool for compatibility (the default one throws
  # a parse exception on our solution files).
  - task: NuGetToolInstaller@1
    displayName: Install NuGet 5.x on Build Agent
    inputs:
      versionSpec: '5.x'

  # Run a NuGet restore on all the solution files.
  - task: NuGetCommand@2
    displayName: Restore NuGet Packages
    inputs:
      command: 'restore'
      restoreSolution: '**/Edreams.OutlookMiddleware.sln'
      feedsToUse: config
      nugetConfigPath: '$(Build.SourcesDirectory)/.nuget/nuget.config'

  # Run a Visual Studio build on all solution files.
  - task: VSBuild@1
    inputs:
      restoreSolution: '**/Edreams.OutlookMiddleware.sln'
      configuration: Release

  # Run UnitTests
  - task: DotNetCoreCLI@2
    displayName: Run UnitTests
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'
      arguments: '--configuration Release --no-build /p:CollectCoverage=true /p:IncludeTestAssembly=true /p:CoverletOutputFormat=opencover%2ccobertura /p:CoverletOutput=coverage/'

  # Publish Edreams.OutlookMiddleware.Services.Upload.Scheduler using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Services.Upload.Scheduler using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Services.Upload.Scheduler.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Upload.Scheduler
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Services.Upload.Scheduler.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Services.Upload.Scheduler'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Services.Upload.Scheduler.zip'
        replaceExistingArchive: true

  # Publish Edreams.OutlookMiddleware.Services.Upload.Engine using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Services.Upload.Engine using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Services.Upload.Engine.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Upload.Engine
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Services.Upload.Engine.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Services.Upload.Engine'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Services.Upload.Engine.zip'
        replaceExistingArchive: true

  # Publish Edreams.OutlookMiddleware.Services.Categorization.Scheduler using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Services.Categorization.Scheduler using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Services.Categorization.Scheduler.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Categorization.Scheduler
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Services.Categorization.Scheduler.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Services.Categorization.Scheduler'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Services.Categorization.Scheduler.zip'
        replaceExistingArchive: true

  # Publish Edreams.OutlookMiddleware.Services.Categorization.Engine using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Services.Categorization.Engine using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Services.Categorization.Engine.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Categorization.Engine
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Services.Categorization.Engine.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Services.Categorization.Engine'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Services.Categorization.Engine.zip'
        replaceExistingArchive: true

  # Publish Edreams.OutlookMiddleware.Services.Cleanup using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Services.Cleanup using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Services.Cleanup.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Cleanup
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Services.Cleanup.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Services.Cleanup'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Services.Cleanup.zip'
        replaceExistingArchive: true

  # Publish Edreams.OutlookMiddleware.Services.Notification using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Services.Notification using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Services.Notification.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Notification
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Services.Notification.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Services.Notification'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Services.Notification.zip'
        replaceExistingArchive: true

  # Copy all zipped artifacts to the artifact output
  - task: PublishBuildArtifacts@1
    displayName: Upload Artifacts
    inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\zip' 
        artifactName: 'release'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: pack
      arguments: '--configuration $(buildConfiguration)'      
      packagesToPack: 'Edreams.OutlookMiddleware.DataTransferObjects/Edreams.OutlookMiddleware.DataTransferObjects.csproj'
      includeReferencedProjects: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'Build.BuildNumber'
      includeSymbols: true
  
  - task: DotNetCoreCLI@2
    displayName: 'dotnet push'
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      verbosityPush: 'detailed'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'eDReaMS_vNext_Feed'
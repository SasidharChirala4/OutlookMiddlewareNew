# This build pipeline will only be triggered by changes on the 'master branch'.
trigger:
  - dev
  - feature-*
  
# This build pipeline will run on agents from the 'default' build agent pool
# and will specifically target build agents that have the custom 'Build.Server'
pool: 
  name: DSI e-DReaMS BUILDS

# This variable will make sure that automatic Azure DevOps code coverage generation is disabled.
# For this build we are using a custom code coverage tool that generates a more extensive output.
variables:
  - name: disable.coverage.autogenerate
    value: 'true'

# This build pipeline will run the following build steps...
steps:

  # This PowerShell script updates the build number.
  - task: PowerShell@2
    displayName: Set Dynamic Build Number
    inputs:
      targetType: 'inline'
      script: |        
        $today = Get-Date 
        $midnight = Get-Date -Hour 0 -Minute 00 -Second 00
        $referenceDate = [datetime]"01/01/2000 00:00"
        $diffInDays = New-TimeSpan -Start $referenceDate -End $today
        $autoBuild = [math]::Floor($diffInDays.TotalDays)
        $diffInSeconds = New-TimeSpan -Start $midnight -End $today
        $autoRevision = [math]::Floor($diffInSeconds.TotalSeconds / 2)
        $buildNumber = "0.1." + $autoBuild + "." + $autoRevision

        Write-Host "Current Build Number " + $env:BUILD_BUILDNUMBER
        Write-Host "Generated Build Number " + $buildNumber
        Write-Host "##vso[build.updatebuildnumber]$buildNumber"
        Write-Host "Done"

  # Install the latest NuGet tool for compatibility (the default one throws
  # a parse exception on our solution files).
  - task: NuGetToolInstaller@1
    displayName: Install NuGet 5.x on Build Agent
    inputs:
      versionSpec: '5.x'
      
  # Run a NuGet restore on all the solution files.
  - task: NuGetCommand@2
    displayName: Restore NuGet Packages
    inputs:
      command: 'restore'
      restoreSolution: '**/*.sln'
      feedsToUse: config
      nugetConfigPath: '$(Build.SourcesDirectory)/.nuget/nuget.config'

  # Run a Visual Studio build on all solution files.
  - task: VSBuild@1
    displayName: Build Solution using Visual Studio
    inputs:
      solution: '**\*.sln'
      configuration: Release
    
  # Publish Edreams.OutlookMiddleware.Api using the .NET Core CLI
  - task: DotNetCoreCLI@2
    displayName: Publish Edreams.OutlookMiddleware.Api using the .NET Core CLI
    inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Edreams.OutlookMiddleware.Api.csproj'
        arguments: '--configuration Release --output $(Build.StagingDirectory)'
        zipAfterPublish: False

  # Zip Edreams.OutlookMiddleware.Services.Upload.Scheduler
  - task: ArchiveFiles@2
    displayName: Create Edreams.OutlookMiddleware.Api.zip archive
    inputs:
        rootFolderOrFile: '$(Build.StagingDirectory)\Edreams.OutlookMiddleware.Api'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\zip\Edreams.OutlookMiddleware.Api.zip'
        replaceExistingArchive: true

  # Copy all zipped artifacts to the artifact output
  - task: PublishBuildArtifacts@1
    displayName: Upload Artifacts
    inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\zip' 
        artifactName: 'release'